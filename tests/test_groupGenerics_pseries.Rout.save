
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## test of groupGernerics for 'pseries' objects work
> ## test of propagation
> ##
> ## see further down below (5) for an example of R's behaviour for a wrapping class "myclass" without group Generics
> ## see also (6) for a case which cannot be worked around (best to my knowledge)
> library(plm)
> data("Grunfeld", package = "plm")
> Grunfeld[ , "integer"] <- rep(c(1L, 2L, 3L, 4L), 25)
> Grunfeld[ , "logi"]    <- rep(c(TRUE, FALSE, TRUE, FALSE), 25)
> Grunfeld[ , "complex"] <- rep(c(1+0i, 2+1i), 100)
> Grunfeld[ , "char"] <- rep(c("a1", "b2"), 100)
> Grunfeld[ , "fac"] <- factor(rep(c("a", "b"), 100))
> pGrunfeld <- pdata.frame(Grunfeld, stringsAsFactors = FALSE)
> 
> ############### (1) general checks if group generics and propagation works ###########
> 
> # check Ops: integer -> numeric
> stopifnot(all.equal(c("pseries", class(Grunfeld$integer / 33)), class(pGrunfeld$integer / 33)))
> 
> # check Ops: logical -> numeric
> stopifnot(all.equal(c("pseries", class(Grunfeld$logi + 1.1)), class(pGrunfeld$logi + 1.1)))
> stopifnot(all.equal(c("pseries", class(-Grunfeld$logi)), class(-pGrunfeld$logi)))
> 
> stopifnot(all(class(diff(pGrunfeld$logi)) == c("pseries", "integer")))
> 
> ## check Ops: non-vector result, result is matrix (may not be class c("pseries", "matrix"))
> mdat <- matrix(c(1:200), nrow = 200, ncol = 1, byrow = TRUE)
> stopifnot(inherits(pGrunfeld$integer * mdat, "matrix"))
> stopifnot(inherits(pGrunfeld$logi * mdat,    "matrix"))
> stopifnot(inherits(mdat * pGrunfeld$integer, "matrix"))
> stopifnot(inherits(mdat * pGrunfeld$logi,    "matrix"))
> 
> # check Math: also with optional second argument (check calculation and class)
> stopifnot(all.equal(log(Grunfeld$integer), as.numeric(log(pGrunfeld$integer))))
> stopifnot(all.equal(c("pseries", class(log(Grunfeld$integer))), class(log(pGrunfeld$integer))))
> 
> stopifnot(all.equal(log(Grunfeld$integer, 20), as.numeric(log(pGrunfeld$integer, 20))))
> stopifnot(all.equal(c("pseries", class(log(Grunfeld$integer, 20))), class(log(pGrunfeld$integer, 20))))
> 
> 
> # check Complex
> stopifnot(all(c("pseries", class(Re(Grunfeld$logi))) == class(Re(pGrunfeld$logi))))
> stopifnot(all(c("pseries", class(Im(Grunfeld$logi))) == class(Im(pGrunfeld$logi))))
> stopifnot(all(c("pseries", class(Conj(Grunfeld$logi))) == class(Re(pGrunfeld$logi))))
> stopifnot(all(c("pseries", class(Conj(Grunfeld$complex))) == class(Conj(pGrunfeld$complex))))
> # this is a downward propagation complex -> numeric
> stopifnot(all(c("pseries", class(Re(Grunfeld$complex))) == class(Re(pGrunfeld$complex))))
> 
> ############# (2) check of model estimation with dependent variable as integer #########
> ## During testing phase of the implementation of groupGenerics, it became apparent that
> ## non-correct implementation yields different results when an integer serves as dependent
> ## variable -> use an integer as test case
> data("Produc", package = "plm")
> 
> ## gsp is an integer
> form <- log(gsp) ~ log(pcap) + log(pc) + log(emp) + unemp
> zz <- plm(form, data = Produc, index=c("state","year"), model = "within")
> print(summary(zz))
Oneway (individual) effect Within Model

Call:
plm(formula = form, data = Produc, model = "within", index = c("state", 
    "year"))

Balanced Panel: n = 48, T = 17, N = 816

Residuals:
     Min.   1st Qu.    Median   3rd Qu.      Max. 
-0.120456 -0.023741 -0.002041  0.018144  0.174718 

Coefficients:
             Estimate  Std. Error t-value  Pr(>|t|)    
log(pcap) -0.02614965  0.02900158 -0.9017    0.3675    
log(pc)    0.29200693  0.02511967 11.6246 < 2.2e-16 ***
log(emp)   0.76815947  0.03009174 25.5273 < 2.2e-16 ***
unemp     -0.00529774  0.00098873 -5.3582 1.114e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Total Sum of Squares:    18.941
Residual Sum of Squares: 1.1112
R-Squared:      0.94134
Adj. R-Squared: 0.93742
F-statistic: 3064.81 on 4 and 764 DF, p-value: < 2.22e-16
> 
> pProduc <- pdata.frame(Produc)
> pProduc$gsp2 <- as.numeric(pProduc$gsp)
> 
> zz2 <- plm(update(form, log(gsp2) ~ . ), data = pProduc, index = c("state","year"), model = "within")
> print(summary(zz2))
Oneway (individual) effect Within Model

Call:
plm(formula = update(form, log(gsp2) ~ .), data = pProduc, model = "within", 
    index = c("state", "year"))

Balanced Panel: n = 48, T = 17, N = 816

Residuals:
     Min.   1st Qu.    Median   3rd Qu.      Max. 
-0.120456 -0.023741 -0.002041  0.018144  0.174718 

Coefficients:
             Estimate  Std. Error t-value  Pr(>|t|)    
log(pcap) -0.02614965  0.02900158 -0.9017    0.3675    
log(pc)    0.29200693  0.02511967 11.6246 < 2.2e-16 ***
log(emp)   0.76815947  0.03009174 25.5273 < 2.2e-16 ***
unemp     -0.00529774  0.00098873 -5.3582 1.114e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Total Sum of Squares:    18.941
Residual Sum of Squares: 1.1112
R-Squared:      0.94134
Adj. R-Squared: 0.93742
F-statistic: 3064.81 on 4 and 764 DF, p-value: < 2.22e-16
> 
> if (!isTRUE(all.equal(zz$coefficients, zz2$coefficients))) stop("estimation results not equal")
> 
> 
> ############# (3) assinging to a pdata.frame #############
> ## test for assigning by $<- to a pdata.frame
> ## pre rev. 634: decimals which had been integers previously were converted to integers with typeof == integer
> ##               and gave wrong results.
> 
> Grunfeld[ , "integer"] <- rep(c(1L, 2L, 3L, 4L), 25)
> Grunfeld[ , "logi"]    <- rep(c(TRUE, FALSE, TRUE, FALSE), 25)
> pGrunfeld <- pdata.frame(Grunfeld)
> 
> class(pGrunfeld[ , "integer"])
[1] "pseries" "integer"
> class(pGrunfeld[ , "integer"] / 3)
[1] "pseries" "numeric"
> 
> # assign: we don't (yet?) have methods for [<-.pdata.frame and [[<-.pdata.frame, so it dispatches to the respective data.frame methods
> # This results in really assigning a pseries to the pdata.frame in case of [<- and [[<- as can be seen by lapply(pGrunfeld, class)
> pGrunfeld[ , "int2double"] <- pGrunfeld$integer / 30 
> pGrunfeld$int2double2      <- pGrunfeld$integer / 30 # this case by assigning with $<- is treated differently as we have "$<-.pdata.frame" defined
> pGrunfeld[["int2double3"]] <- pGrunfeld$integer / 30
> 
> class(pGrunfeld[ , "int2double"])
[1] "pseries" "numeric"
> class(pGrunfeld[ , "int2double2"])
[1] "pseries" "numeric"
> class(pGrunfeld[ , "int2double3"])
[1] "pseries" "numeric"
> 
> typeof(pGrunfeld[ , "int2double"])
[1] "double"
> typeof(pGrunfeld[ , "int2double2"])
[1] "double"
> typeof(pGrunfeld[ , "int2double3"])
[1] "double"
> 
> # check values
> if(isTRUE(all.equal(as.numeric(pGrunfeld[ , "int2double"]),  rep(0, 200)))) stop("when assigning by [<-: double casted to integer (wrong result)")
> if(isTRUE(all.equal(as.numeric(pGrunfeld$int2double2),       rep(0, 200)))) stop("when assigning by $<-: double casted to integer (wrong result)")
> if(isTRUE(all.equal(as.numeric(pGrunfeld[ , "int2double3"]), rep(0, 200)))) stop("when assigning by [[<-: double casted to integer (wrong result)")
> 
> # check classes
> if(!isTRUE(all.equal(class(pGrunfeld[ , "int2double"]),  c("pseries", "numeric")))) stop("when assigning by [<-: double casted to logical (wrong class)")
> if(!isTRUE(all.equal(class(pGrunfeld$int2double2),       c("pseries", "numeric")))) stop("when assigning by $<-: double casted to logical (wrong class)")
> if(!isTRUE(all.equal(class(pGrunfeld[ , "int2double3"]), c("pseries", "numeric")))) stop("when assigning by [[<-: double casted to logical (wrong class)")
> 
> ## same with logicals:
> pGrunfeld[ , "logi2double1"] <- pGrunfeld$logi / 10
> pGrunfeld$logi2double2       <- pGrunfeld$logi / 10
> pGrunfeld[["logi2double3"]]  <- pGrunfeld$logi / 10
> 
> class(pGrunfeld[ , "logi2double1"])
[1] "pseries" "numeric"
> class(pGrunfeld[ , "logi2double2"])
[1] "pseries" "numeric"
> class(pGrunfeld[ , "logi2double3"])
[1] "pseries" "numeric"
> 
> typeof(pGrunfeld[ , "logi2double1"])
[1] "double"
> typeof(pGrunfeld[ , "logi2double2"])
[1] "double"
> typeof(pGrunfeld[ , "logi2double3"])
[1] "double"
> 
> # check values
> if(!isTRUE(all.equal(as.numeric(pGrunfeld[ , "logi2double1"]), rep(c(0.1, 0.0), 100)))) stop("when assigning by [<-: double casted to logical (wrong result)")
> if(!isTRUE(all.equal(as.numeric(pGrunfeld$logi2double2),       rep(c(0.1, 0.0), 100)))) stop("when assigning by $<-: double casted to logical (wrong result)")
> if(!isTRUE(all.equal(as.numeric(pGrunfeld[ , "logi2double3"]), rep(c(0.1, 0.0), 100)))) stop("when assigning by [[<-: double casted to logical (wrong result)")
> 
> # check classes
> if(!isTRUE(all.equal(class(pGrunfeld[ , "logi2double1"]), c("pseries", "numeric")))) stop("when assigning by [<-: double casted to logical (wrong class)")
> if(!isTRUE(all.equal(class(pGrunfeld$logi2double2),       c("pseries", "numeric")))) stop("when assigning by $<-: double casted to logical (wrong class)")
> if(!isTRUE(all.equal(class(pGrunfeld[ , "logi2double3"]), c("pseries", "numeric")))) stop("when assigning by [[<-: double casted to logical (wrong class)")
> 
> 
> ############## (4) test for various kinds of argument combinations in Ops.pseries ##############
> 
> # e1: pseries, e2: not a pseries and vice versa
> # -> result must be a pseries in both cases
> e1e2_a <- `*`(pGrunfeld$integer, 4L)
> e1e2_b <- `*`(4L, pGrunfeld$integer)
> class(e1e2_a)
[1] "pseries" "integer"
> class(e1e2_b)
[1] "pseries" "integer"
> stopifnot(is.pseries(e1e2_a))
> stopifnot(is.pseries(e1e2_b))
> stopifnot(isTRUE(all.equal(e1e2_a, e1e2_b)))
> 
> # e1, e2: pseries with varying length
> # -> result must have index of longer pseries (as the shorter pseries is recycled)
> pGrunfeld_short <- pGrunfeld[4:5, ]
> e1e2_c <- `*`(pGrunfeld$integer,       pGrunfeld_short$integer)
> e1e2_d <- `*`(pGrunfeld_short$integer, pGrunfeld$integer)
> length(e1e2_c)
[1] 200
> length(e1e2_d)
[1] 200
> index(e1e2_c)
    firm year
1      1 1935
2      1 1936
3      1 1937
4      1 1938
5      1 1939
6      1 1940
7      1 1941
8      1 1942
9      1 1943
10     1 1944
11     1 1945
12     1 1946
13     1 1947
14     1 1948
15     1 1949
16     1 1950
17     1 1951
18     1 1952
19     1 1953
20     1 1954
21     2 1935
22     2 1936
23     2 1937
24     2 1938
25     2 1939
26     2 1940
27     2 1941
28     2 1942
29     2 1943
30     2 1944
31     2 1945
32     2 1946
33     2 1947
34     2 1948
35     2 1949
36     2 1950
37     2 1951
38     2 1952
39     2 1953
40     2 1954
41     3 1935
42     3 1936
43     3 1937
44     3 1938
45     3 1939
46     3 1940
47     3 1941
48     3 1942
49     3 1943
50     3 1944
51     3 1945
52     3 1946
53     3 1947
54     3 1948
55     3 1949
56     3 1950
57     3 1951
58     3 1952
59     3 1953
60     3 1954
61     4 1935
62     4 1936
63     4 1937
64     4 1938
65     4 1939
66     4 1940
67     4 1941
68     4 1942
69     4 1943
70     4 1944
71     4 1945
72     4 1946
73     4 1947
74     4 1948
75     4 1949
76     4 1950
77     4 1951
78     4 1952
79     4 1953
80     4 1954
81     5 1935
82     5 1936
83     5 1937
84     5 1938
85     5 1939
86     5 1940
87     5 1941
88     5 1942
89     5 1943
90     5 1944
91     5 1945
92     5 1946
93     5 1947
94     5 1948
95     5 1949
96     5 1950
97     5 1951
98     5 1952
99     5 1953
100    5 1954
101    6 1935
102    6 1936
103    6 1937
104    6 1938
105    6 1939
106    6 1940
107    6 1941
108    6 1942
109    6 1943
110    6 1944
111    6 1945
112    6 1946
113    6 1947
114    6 1948
115    6 1949
116    6 1950
117    6 1951
118    6 1952
119    6 1953
120    6 1954
121    7 1935
122    7 1936
123    7 1937
124    7 1938
125    7 1939
126    7 1940
127    7 1941
128    7 1942
129    7 1943
130    7 1944
131    7 1945
132    7 1946
133    7 1947
134    7 1948
135    7 1949
136    7 1950
137    7 1951
138    7 1952
139    7 1953
140    7 1954
141    8 1935
142    8 1936
143    8 1937
144    8 1938
145    8 1939
146    8 1940
147    8 1941
148    8 1942
149    8 1943
150    8 1944
151    8 1945
152    8 1946
153    8 1947
154    8 1948
155    8 1949
156    8 1950
157    8 1951
158    8 1952
159    8 1953
160    8 1954
161    9 1935
162    9 1936
163    9 1937
164    9 1938
165    9 1939
166    9 1940
167    9 1941
168    9 1942
169    9 1943
170    9 1944
171    9 1945
172    9 1946
173    9 1947
174    9 1948
175    9 1949
176    9 1950
177    9 1951
178    9 1952
179    9 1953
180    9 1954
181   10 1935
182   10 1936
183   10 1937
184   10 1938
185   10 1939
186   10 1940
187   10 1941
188   10 1942
189   10 1943
190   10 1944
191   10 1945
192   10 1946
193   10 1947
194   10 1948
195   10 1949
196   10 1950
197   10 1951
198   10 1952
199   10 1953
200   10 1954
> index(e1e2_d)
    firm year
1      1 1935
2      1 1936
3      1 1937
4      1 1938
5      1 1939
6      1 1940
7      1 1941
8      1 1942
9      1 1943
10     1 1944
11     1 1945
12     1 1946
13     1 1947
14     1 1948
15     1 1949
16     1 1950
17     1 1951
18     1 1952
19     1 1953
20     1 1954
21     2 1935
22     2 1936
23     2 1937
24     2 1938
25     2 1939
26     2 1940
27     2 1941
28     2 1942
29     2 1943
30     2 1944
31     2 1945
32     2 1946
33     2 1947
34     2 1948
35     2 1949
36     2 1950
37     2 1951
38     2 1952
39     2 1953
40     2 1954
41     3 1935
42     3 1936
43     3 1937
44     3 1938
45     3 1939
46     3 1940
47     3 1941
48     3 1942
49     3 1943
50     3 1944
51     3 1945
52     3 1946
53     3 1947
54     3 1948
55     3 1949
56     3 1950
57     3 1951
58     3 1952
59     3 1953
60     3 1954
61     4 1935
62     4 1936
63     4 1937
64     4 1938
65     4 1939
66     4 1940
67     4 1941
68     4 1942
69     4 1943
70     4 1944
71     4 1945
72     4 1946
73     4 1947
74     4 1948
75     4 1949
76     4 1950
77     4 1951
78     4 1952
79     4 1953
80     4 1954
81     5 1935
82     5 1936
83     5 1937
84     5 1938
85     5 1939
86     5 1940
87     5 1941
88     5 1942
89     5 1943
90     5 1944
91     5 1945
92     5 1946
93     5 1947
94     5 1948
95     5 1949
96     5 1950
97     5 1951
98     5 1952
99     5 1953
100    5 1954
101    6 1935
102    6 1936
103    6 1937
104    6 1938
105    6 1939
106    6 1940
107    6 1941
108    6 1942
109    6 1943
110    6 1944
111    6 1945
112    6 1946
113    6 1947
114    6 1948
115    6 1949
116    6 1950
117    6 1951
118    6 1952
119    6 1953
120    6 1954
121    7 1935
122    7 1936
123    7 1937
124    7 1938
125    7 1939
126    7 1940
127    7 1941
128    7 1942
129    7 1943
130    7 1944
131    7 1945
132    7 1946
133    7 1947
134    7 1948
135    7 1949
136    7 1950
137    7 1951
138    7 1952
139    7 1953
140    7 1954
141    8 1935
142    8 1936
143    8 1937
144    8 1938
145    8 1939
146    8 1940
147    8 1941
148    8 1942
149    8 1943
150    8 1944
151    8 1945
152    8 1946
153    8 1947
154    8 1948
155    8 1949
156    8 1950
157    8 1951
158    8 1952
159    8 1953
160    8 1954
161    9 1935
162    9 1936
163    9 1937
164    9 1938
165    9 1939
166    9 1940
167    9 1941
168    9 1942
169    9 1943
170    9 1944
171    9 1945
172    9 1946
173    9 1947
174    9 1948
175    9 1949
176    9 1950
177    9 1951
178    9 1952
179    9 1953
180    9 1954
181   10 1935
182   10 1936
183   10 1937
184   10 1938
185   10 1939
186   10 1940
187   10 1941
188   10 1942
189   10 1943
190   10 1944
191   10 1945
192   10 1946
193   10 1947
194   10 1948
195   10 1949
196   10 1950
197   10 1951
198   10 1952
199   10 1953
200   10 1954
> nrow(index(e1e2_c))
[1] 200
> nrow(index(e1e2_d))
[1] 200
> stopifnot(is.pseries(e1e2_c))
> stopifnot(is.pseries(e1e2_d))
> stopifnot(isTRUE(all.equal(index(e1e2_c), index(pGrunfeld$integer))))
> stopifnot(isTRUE(all.equal(index(e1e2_d), index(pGrunfeld$integer))))
> 
> # e1, e2: pseries with index of same length but different content
> # -> result is assigned index of first operand
> Gr <- Grunfeld
> Gr$firm <- sort(rep(LETTERS[1:10], 20)) # make individual index different
> pGr <- pdata.frame(Gr, stringsAsFactors = FALSE)
> e1e2_e <- `*`(pGr$integer,       pGrunfeld$integer)
> e1e2_f <- `*`(pGrunfeld$integer, pGr$integer)
> index(e1e2_e)
    firm year
1      A 1935
2      A 1936
3      A 1937
4      A 1938
5      A 1939
6      A 1940
7      A 1941
8      A 1942
9      A 1943
10     A 1944
11     A 1945
12     A 1946
13     A 1947
14     A 1948
15     A 1949
16     A 1950
17     A 1951
18     A 1952
19     A 1953
20     A 1954
21     B 1935
22     B 1936
23     B 1937
24     B 1938
25     B 1939
26     B 1940
27     B 1941
28     B 1942
29     B 1943
30     B 1944
31     B 1945
32     B 1946
33     B 1947
34     B 1948
35     B 1949
36     B 1950
37     B 1951
38     B 1952
39     B 1953
40     B 1954
41     C 1935
42     C 1936
43     C 1937
44     C 1938
45     C 1939
46     C 1940
47     C 1941
48     C 1942
49     C 1943
50     C 1944
51     C 1945
52     C 1946
53     C 1947
54     C 1948
55     C 1949
56     C 1950
57     C 1951
58     C 1952
59     C 1953
60     C 1954
61     D 1935
62     D 1936
63     D 1937
64     D 1938
65     D 1939
66     D 1940
67     D 1941
68     D 1942
69     D 1943
70     D 1944
71     D 1945
72     D 1946
73     D 1947
74     D 1948
75     D 1949
76     D 1950
77     D 1951
78     D 1952
79     D 1953
80     D 1954
81     E 1935
82     E 1936
83     E 1937
84     E 1938
85     E 1939
86     E 1940
87     E 1941
88     E 1942
89     E 1943
90     E 1944
91     E 1945
92     E 1946
93     E 1947
94     E 1948
95     E 1949
96     E 1950
97     E 1951
98     E 1952
99     E 1953
100    E 1954
101    F 1935
102    F 1936
103    F 1937
104    F 1938
105    F 1939
106    F 1940
107    F 1941
108    F 1942
109    F 1943
110    F 1944
111    F 1945
112    F 1946
113    F 1947
114    F 1948
115    F 1949
116    F 1950
117    F 1951
118    F 1952
119    F 1953
120    F 1954
121    G 1935
122    G 1936
123    G 1937
124    G 1938
125    G 1939
126    G 1940
127    G 1941
128    G 1942
129    G 1943
130    G 1944
131    G 1945
132    G 1946
133    G 1947
134    G 1948
135    G 1949
136    G 1950
137    G 1951
138    G 1952
139    G 1953
140    G 1954
141    H 1935
142    H 1936
143    H 1937
144    H 1938
145    H 1939
146    H 1940
147    H 1941
148    H 1942
149    H 1943
150    H 1944
151    H 1945
152    H 1946
153    H 1947
154    H 1948
155    H 1949
156    H 1950
157    H 1951
158    H 1952
159    H 1953
160    H 1954
161    I 1935
162    I 1936
163    I 1937
164    I 1938
165    I 1939
166    I 1940
167    I 1941
168    I 1942
169    I 1943
170    I 1944
171    I 1945
172    I 1946
173    I 1947
174    I 1948
175    I 1949
176    I 1950
177    I 1951
178    I 1952
179    I 1953
180    I 1954
181    J 1935
182    J 1936
183    J 1937
184    J 1938
185    J 1939
186    J 1940
187    J 1941
188    J 1942
189    J 1943
190    J 1944
191    J 1945
192    J 1946
193    J 1947
194    J 1948
195    J 1949
196    J 1950
197    J 1951
198    J 1952
199    J 1953
200    J 1954
> index(e1e2_f)
    firm year
1      1 1935
2      1 1936
3      1 1937
4      1 1938
5      1 1939
6      1 1940
7      1 1941
8      1 1942
9      1 1943
10     1 1944
11     1 1945
12     1 1946
13     1 1947
14     1 1948
15     1 1949
16     1 1950
17     1 1951
18     1 1952
19     1 1953
20     1 1954
21     2 1935
22     2 1936
23     2 1937
24     2 1938
25     2 1939
26     2 1940
27     2 1941
28     2 1942
29     2 1943
30     2 1944
31     2 1945
32     2 1946
33     2 1947
34     2 1948
35     2 1949
36     2 1950
37     2 1951
38     2 1952
39     2 1953
40     2 1954
41     3 1935
42     3 1936
43     3 1937
44     3 1938
45     3 1939
46     3 1940
47     3 1941
48     3 1942
49     3 1943
50     3 1944
51     3 1945
52     3 1946
53     3 1947
54     3 1948
55     3 1949
56     3 1950
57     3 1951
58     3 1952
59     3 1953
60     3 1954
61     4 1935
62     4 1936
63     4 1937
64     4 1938
65     4 1939
66     4 1940
67     4 1941
68     4 1942
69     4 1943
70     4 1944
71     4 1945
72     4 1946
73     4 1947
74     4 1948
75     4 1949
76     4 1950
77     4 1951
78     4 1952
79     4 1953
80     4 1954
81     5 1935
82     5 1936
83     5 1937
84     5 1938
85     5 1939
86     5 1940
87     5 1941
88     5 1942
89     5 1943
90     5 1944
91     5 1945
92     5 1946
93     5 1947
94     5 1948
95     5 1949
96     5 1950
97     5 1951
98     5 1952
99     5 1953
100    5 1954
101    6 1935
102    6 1936
103    6 1937
104    6 1938
105    6 1939
106    6 1940
107    6 1941
108    6 1942
109    6 1943
110    6 1944
111    6 1945
112    6 1946
113    6 1947
114    6 1948
115    6 1949
116    6 1950
117    6 1951
118    6 1952
119    6 1953
120    6 1954
121    7 1935
122    7 1936
123    7 1937
124    7 1938
125    7 1939
126    7 1940
127    7 1941
128    7 1942
129    7 1943
130    7 1944
131    7 1945
132    7 1946
133    7 1947
134    7 1948
135    7 1949
136    7 1950
137    7 1951
138    7 1952
139    7 1953
140    7 1954
141    8 1935
142    8 1936
143    8 1937
144    8 1938
145    8 1939
146    8 1940
147    8 1941
148    8 1942
149    8 1943
150    8 1944
151    8 1945
152    8 1946
153    8 1947
154    8 1948
155    8 1949
156    8 1950
157    8 1951
158    8 1952
159    8 1953
160    8 1954
161    9 1935
162    9 1936
163    9 1937
164    9 1938
165    9 1939
166    9 1940
167    9 1941
168    9 1942
169    9 1943
170    9 1944
171    9 1945
172    9 1946
173    9 1947
174    9 1948
175    9 1949
176    9 1950
177    9 1951
178    9 1952
179    9 1953
180    9 1954
181   10 1935
182   10 1936
183   10 1937
184   10 1938
185   10 1939
186   10 1940
187   10 1941
188   10 1942
189   10 1943
190   10 1944
191   10 1945
192   10 1946
193   10 1947
194   10 1948
195   10 1949
196   10 1950
197   10 1951
198   10 1952
199   10 1953
200   10 1954
> stopifnot(is.pseries(e1e2_e))
> stopifnot(is.pseries(e1e2_f))
> 
> 
> 
> ############## (5) demonstration of R's behaviour for a wrapping class "myclass" without group generics ##############
> 
> x <- c(1L, 2L, 3L)
> class(x) # integer
[1] "integer"
> mode(x)
[1] "numeric"
> typeof(x)
[1] "integer"
> 
> y <- x
> class(y) <- c("myclass", class(y))
> class(y) # c("myclass", "integer")
[1] "myclass" "integer"
> mode(y)
[1] "numeric"
> typeof(y)
[1] "integer"
> 
> x2 <- x / 10
> class(x2) # numeric - propagated to higher class numeric
[1] "numeric"
> mode(x2)
[1] "numeric"
> typeof(x2)
[1] "double"
> 
> y2 <- y / 10
> class(y2) # c("myclass", "interger") - not propagated to c("myclass", "numeric")
[1] "myclass" "integer"
> mode(y2)
[1] "numeric"
> typeof(y2)
[1] "double"
> y2 # 0.1 0.2 0.3 - class is c("myclass", "integer") but result is decimals!
[1] 0.1 0.2 0.3
attr(,"class")
[1] "myclass" "integer"
> 
> y3 <- y2
> typeof(y3) # double
[1] "double"
> class(y3) <- setdiff(class(y3), "myclass")
> class(y3) # integer
[1] "integer"
> mode(y3)
[1] "numeric"
> typeof(y3) # integer
[1] "integer"
> y3 # 0 0 0 - integers after class() <- "integer"
[1] 0 0 0
> 
> y4 <- y2
> attr(y4, "class")
[1] "myclass" "integer"
> attr(y4, "class") <- NULL
> class(y4)
[1] "numeric"
> mode(y4)
[1] "numeric"
> typeof(y4)
[1] "double"
> y4 # 0.1 0.2 0.3 numerics after attr(obj, "class") <- NULL
[1] 0.1 0.2 0.3
> 
> fac <- factor(x)
> class(fac)
[1] "factor"
> typeof(fac)
[1] "integer"
> mode(fac)
[1] "numeric"
> 
> logi <- c(TRUE, FALSE, TRUE)
> class(logi) # logical
[1] "logical"
> typeof(logi) # logical
[1] "logical"
> class(logi) <- union("myclass", class(logi))
> class(logi) # myclass logical
[1] "myclass" "logical"
> loginum <- logi - 1.5
> class(loginum) # myclass logical
[1] "myclass" "logical"
> typeof(loginum) # double
[1] "double"
> 
> ############## (6) demonstrate case of R's behaviour which cannot be worked around even with without group generics ##############
> # dpois() (also dnorm() and likely more) does not strip unnecessary classes and custom attributes
> # before it performs its operations
> ## see also ## see also: https://bugs.r-project.org/bugzilla/show_bug.cgi?id=17516
> class(pGrunfeld$integer) #  "pseries" "integer"
[1] "pseries" "integer"
> set.seed(42)
> res_dpois <- dpois(pGrunfeld$integer, sample(1:10, 200, replace = TRUE))
> class(res_dpois) # "pseries" "integer"  <-- can do nothing about his
[1] "pseries" "integer"
> typeof(res_dpois) # double
[1] "double"
> str(res_dpois)
 'pseries' Named num [1:200] 0.367879 0.084224 0.061313 0.033737 0.000454 ...
 - attr(*, "names")= chr [1:200] "1-1935" "1-1936" "1-1937" "1-1938" ...
 - attr(*, "index")=Classes 'pindex' and 'data.frame':	200 obs. of  2 variables:
  ..$ firm: Factor w/ 10 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..$ year: Factor w/ 20 levels "1935","1936",..: 1 2 3 4 5 6 7 8 9 10 ...
> res_pmax <- pmax(res_dpois, .Machine[["double.eps"]])
> # this errored for a while when no correction in remove_pseries_features() was in place:
> if(isTRUE(all.equal(as.numeric(res_pmax), rep(.Machine[["double.eps"]], 200)))) {
+   stop("pmax gives wrong result due wrong coercion (integer/numeric)")
+ }
> 
> proc.time()
   user  system elapsed 
   4.21    0.40    4.64 
